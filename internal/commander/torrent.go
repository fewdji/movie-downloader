package commands

import (
	"encoding/json"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strings"
)

func (cmd *Commander) ShowTorrentList(inputMessage *tgbotapi.Message, cmdData CommandData) {
	sendErrorMsg := func(msgTxt string) {
		errMsg := tgbotapi.NewMessage(inputMessage.Chat.ID, msgTxt)
		errMsg.ReplyToMessageID = inputMessage.MessageID
		cmd.bot.Send(errMsg)
	}

	delMsg := func() {
		cmd.DeleteMessage(inputMessage.Chat.ID, inputMessage.MessageID)
	}

	torrents := cmd.client.List()

	if torrents == nil {
		log.Println("ShowTorrentList: no active torrents")
		if cmdData.Command != "" {
			delMsg()
		}
		sendErrorMsg("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤")
		return
	}

	cmdData.Command = "ts"
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, torrent := range *torrents {
		cmdData.Key = torrent.Hash[0:8]
		serializedData, _ := json.Marshal(cmdData)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s %s [%.1f Gb] - %.1f%%",
				torrentStateIcon(torrent.State), string([]rune(torrent.Title)[:20]), float64(torrent.Size)/float64(1024*1024*1024), torrent.Progress), string(serializedData))))
	}

	cmdData.Command = "del"
	cancel, _ := json.Marshal(cmdData)
	refresh := strings.Replace(string(cancel), "del", "tl", 1)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", string(cancel)),
		tgbotapi.NewInlineKeyboardButtonData("–û–±–Ω–æ–≤–∏—Ç—å", refresh)))

	msg := tgbotapi.NewMessage(inputMessage.Chat.ID,
		fmt.Sprintf("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã (%d):", len(*torrents)))
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg.ReplyToMessageID = inputMessage.MessageID

	delMsg()

	_, err := cmd.bot.Send(msg)
	if err != nil {
		log.Println("ShowTorrentList: can't send", err)
		sendErrorMsg("–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤!")
	}
}

func (cmd *Commander) ShowTorrent(inputMessage *tgbotapi.Message, callbackId string, cmdData CommandData) {
	delMsg := func() {
		cmd.DeleteMessage(inputMessage.Chat.ID, inputMessage.MessageID)
	}

	sendClbk := func(msgTxt string) {
		ans := tgbotapi.NewCallback(callbackId, msgTxt)
		cmd.bot.Send(ans)
	}

	if cmdData.Key == "" {
		log.Println("ShowTorrent: empty key")
		sendClbk("–¢–æ—Ä—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	torrent := cmd.client.Show(cmdData.Key)

	if torrent == nil {
		log.Println("ShowTorrent: not found")
		sendClbk("–¢–æ—Ä—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	switch cmdData.Command {
	case "tp":
		cmd.client.Pause(cmdData.Key)
		sendClbk("–¢–æ—Ä—Ä–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
	case "tc":
		cmd.client.Resume(cmdData.Key)
		sendClbk("–¢–æ—Ä—Ä–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
	case "tr", "tf":
		cmd.client.Delete(cmdData.Key, cmdData.Command == "tf")
		sendClbk("–¢–æ—Ä—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!")
		delMsg()
		cmd.ShowTorrentList(inputMessage, cmdData)
		return
	}

	cmdData.Command = "placeholder"
	serializedData, err := json.Marshal(cmdData)

	clb := string(serializedData)
	clbRun := strings.Replace(clb, "placeholder", "tc", 1)
	clbPause := strings.Replace(clb, "placeholder", "tp", 1)
	clbDel := strings.Replace(clb, "placeholder", "tr", 1)
	clbDelFile := strings.Replace(clb, "placeholder", "tf", 1)
	clbUpdate := strings.Replace(clb, "placeholder", "ts", 1)
	clbBack := strings.Replace(clb, "placeholder", "tl", 1)
	clbCancel := strings.Replace(clb, "placeholder", "del", 1)

	msgText := fmt.Sprintf("*%s*\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: %s\n–†–∞–∑–º–µ—Ä: %.2f Gb\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ: %.2f%%\n–°–∏–¥—ã: %d",
		string([]rune(torrent.Title)[:20]), torrentStateIcon(torrent.State), float64(torrent.Size)/float64(1024*1024*1024), torrent.Progress, torrent.Seeds)

	if torrent.Eta != 0 {
		msgText += fmt.Sprintf("\n–°–∫–æ—Ä–æ—Å—Ç—å: %.2f Mb/—Å–µ–∫.\n–û—Å—Ç–∞–ª–æ—Å—å: %d –º–∏–Ω.", float64(torrent.Speed)/float64(1024*1024), torrent.Eta/60)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø—É—Å—Ç–∏—Ç—å", clbRun),

		tgbotapi.NewInlineKeyboardButtonData("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", clbPause)),

		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç", clbDel),
			tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", clbDelFile)),

		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", clbCancel),
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", clbBack)),

		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û–±–Ω–æ–≤–∏—Ç—å", clbUpdate)))

	msg := tgbotapi.NewMessage(inputMessage.Chat.ID, msgText)
	msg.ParseMode = "markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg.ReplyToMessageID = inputMessage.MessageID

	delMsg()

	_, err = cmd.bot.Send(msg)
	if err != nil {
		log.Println("ShowTorrent: can't send", err)
		sendClbk("–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç!")
	}
}

func torrentStateIcon(state string) string {
	torrentStates := map[string]string{
		"pausedDL":    "‚è∏",
		"pausedUP":    "‚è∏",
		"downloading": "‚è¨",
		"stalledDL":   "‚è¨",
		"uploading":   "‚è´",
		"stalledUP":   "‚è´",
		"checkingDL":  "üîÑ",
		"checkingUP":  "üîÑ",
		"queuedDL":    "‚è≥",
		"queuedUP":    "‚è≥",
		"metaDL":      "üö´",
		"error":       "üö´",
	}

	return torrentStates[state]
}
